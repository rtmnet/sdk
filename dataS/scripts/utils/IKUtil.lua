











































































































































































































































































































































































































---
function IKUtil.registerIKChainTargetsXMLPaths(schema, basePath)
    schema:register(XMLValueType.STRING, basePath .. ".target(?)#ikChain", "IK chain name")
    schema:register(XMLValueType.NODE_INDEX, basePath .. ".target(?)#targetNode", "Target node")
    schema:register(XMLValueType.VECTOR_TRANS, basePath .. ".target(?)#targetOffset", "Target translation offset")
    schema:register(XMLValueType.VECTOR_ROT, basePath .. ".target(?)#targetRotationOffset", "Target rotation offset")
    schema:register(XMLValueType.BOOL, basePath .. ".target(?)#setDirty", "Is dirty", true)
    schema:register(XMLValueType.INT, basePath .. ".target(?).rotationNode(?)#id", "Rotation node index")
    schema:register(XMLValueType.VECTOR_ROT, basePath .. ".target(?).rotationNode(?)#rotation", "Rotation node rotation")
    schema:register(XMLValueType.STRING, basePath .. ".target(?)#poseId", "Pose id")
end


---
function IKUtil.registerIKChainXMLPaths(schema, basePath)
    schema:register(XMLValueType.STRING, basePath .. "#id", "Chain identifier")
    schema:register(XMLValueType.NODE_INDEX, basePath .. "#target", "Target node")
    schema:register(XMLValueType.VECTOR_TRANS, basePath .. "#targetOffset", "Target translation offset", "0 0 0")
    schema:register(XMLValueType.VECTOR_ROT, basePath .. "#targetRotationOffset", "Target rotation offset", "0 0 0")
    schema:register(XMLValueType.BOOL, basePath .. "#alignToTarget", "Align to target", false)

    schema:register(XMLValueType.NODE_INDEX, basePath .. ".node(?)#index", "Chain node")
    schema:register(XMLValueType.ANGLE, basePath .. ".node(?)#minRx", "Min. rotation X", -180)
    schema:register(XMLValueType.ANGLE, basePath .. ".node(?)#maxRx", "Max. rotation X", 180)
    schema:register(XMLValueType.ANGLE, basePath .. ".node(?)#minRy", "Min. rotation Y", -180)
    schema:register(XMLValueType.ANGLE, basePath .. ".node(?)#maxRy", "Max. rotation Y", 180)
    schema:register(XMLValueType.ANGLE, basePath .. ".node(?)#minRz", "Min. rotation Z", -180)
    schema:register(XMLValueType.ANGLE, basePath .. ".node(?)#maxRz", "Max. rotation Z", 180)
    schema:register(XMLValueType.ANGLE, basePath .. ".node(?)#damping", "Damping", 30)
    schema:register(XMLValueType.BOOL, basePath .. ".node(?)#localLimits", "Local limits", false)

    schema:register(XMLValueType.NODE_INDEX, basePath .. ".rotationNode(?)#index", "Rotation node")
    schema:register(XMLValueType.VECTOR_ROT, basePath .. ".rotationNode(?)#rotation", "Rotation")

    schema:register(XMLValueType.STRING, basePath .. ".pose(?)#id", "Pose id")
    schema:register(XMLValueType.BOOL, basePath .. ".pose(?)#isDefaultPose", "Is default pose", false)
    schema:register(XMLValueType.NODE_INDEX, basePath .. ".pose(?).rotationNode(?)#index", "Rotation node")
    schema:register(XMLValueType.VECTOR_ROT, basePath .. ".pose(?).rotationNode(?)#rotation", "Rotation")

    schema:register(XMLValueType.INT, basePath .. "#numIterations", "Max. number of iterations", 20)
    schema:register(XMLValueType.INT, basePath .. "#numIterationsInit", "Initial max. number of iterations", "numIterations * 2")
    schema:register(XMLValueType.FLOAT, basePath .. "#positionThreshold", "Position threshold", 0.005)
    schema:register(XMLValueType.BOOL, basePath .. "#isDirtyOnLoad", "Is dirty on load", false)
end
